import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * MandelBatch application.
 */
public class MandelBatchGUI extends javax.swing.JFrame {

    /** Creates new form MandelBatchGUI */
    public MandelBatchGUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        guiParametersPane = new javax.swing.JPanel();
        guiMinRealField = new javax.swing.JFormattedTextField();
        guiMinRealLabel = new javax.swing.JLabel();
        guiMaxRealLabel = new javax.swing.JLabel();
        guiMaxRealField = new javax.swing.JFormattedTextField();
        guiMinImagLabel = new javax.swing.JLabel();
        guiMinImagField = new javax.swing.JFormattedTextField();
        guiMaxImagLabel = new javax.swing.JLabel();
        guiMaxImagField = new javax.swing.JFormattedTextField();
        guiWidthField = new javax.swing.JFormattedTextField();
        guiWidthLabel = new javax.swing.JLabel();
        guiHeightLabel = new javax.swing.JLabel();
        guiHeightField = new javax.swing.JFormattedTextField();
        guiMaxIterField = new javax.swing.JFormattedTextField();
        guiMaxIterLabel = new javax.swing.JLabel();
        guiNameLabel = new javax.swing.JLabel();
        guiNameField = new javax.swing.JTextField();
        guiRenderPanel = new javax.swing.JPanel();
        guiRenderButton = new javax.swing.JButton();
        guiComputeModeCombo = new javax.swing.JComboBox();
        guiRenderWithLabel = new javax.swing.JLabel();
        guiTimeElapsedField = new javax.swing.JFormattedTextField();
        guiTimeElapsedLabel = new javax.swing.JLabel();
        guiTimeFormatLabel = new javax.swing.JLabel();
        guiSettingListPanel = new javax.swing.JPanel();
        guiNewSettingButton = new javax.swing.JButton();
        guiSettingScrollPane = new javax.swing.JScrollPane();
        guiSettingList = new javax.swing.JList<MandelSetting>();
        guiSaveAllButton = new javax.swing.JButton();
        guiRemoveSettingButton = new javax.swing.JButton();
        guiImageDisplayPanel = new ImagePanel();
	guiProcessBarPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MandelBatch");
        setResizable(false);

        guiParametersPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters"));

        guiMinRealField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.######"))));
        guiMinRealField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                guiMinRealFieldFocusLost(evt);
            }
        });

        guiMinRealLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        guiMinRealLabel.setText("Min Real:");

        guiMaxRealLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        guiMaxRealLabel.setText("Max Real:");

        guiMaxRealField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.######"))));
        guiMaxRealField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                guiMaxRealFieldFocusLost(evt);
            }
        });

        guiMinImagLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        guiMinImagLabel.setText("Min Imaginary:");

        guiMinImagField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.######"))));
        guiMinImagField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                guiMinImagFieldFocusLost(evt);
            }
        });

        guiMaxImagLabel.setText("Max Imaginary:");

        guiMaxImagField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.######"))));
        guiMaxImagField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                guiMaxImagFieldFocusLost(evt);
            }
        });

        guiWidthField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0"))));
        guiWidthField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                guiWidthFieldFocusLost(evt);
            }
        });

        guiWidthLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        guiWidthLabel.setText("Width:");

        guiHeightLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        guiHeightLabel.setText("Height:");

        guiHeightField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0"))));
        guiHeightField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                guiHeightFieldFocusLost(evt);
            }
        });

        guiMaxIterField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0"))));
        guiMaxIterField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                guiMaxIterFieldFocusLost(evt);
            }
        });

        guiMaxIterLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        guiMaxIterLabel.setText("Max Iterations:");

        guiNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        guiNameLabel.setText("Name:");

        guiNameField.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                guiNameFieldFocusLost(evt);
            }
        });

        javax.swing.GroupLayout guiParametersPaneLayout = new javax.swing.GroupLayout(guiParametersPane);
        guiParametersPane.setLayout(guiParametersPaneLayout);
        guiParametersPaneLayout.setHorizontalGroup(
            guiParametersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guiParametersPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(guiParametersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(guiParametersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(guiMaxRealLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(guiMinRealLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(guiNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(guiParametersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, guiParametersPaneLayout.createSequentialGroup()
                        .addComponent(guiNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(guiMaxIterLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guiMaxIterField, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(guiParametersPaneLayout.createSequentialGroup()
                        .addGroup(guiParametersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(guiMaxRealField)
                            .addComponent(guiMinRealField, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(guiParametersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(guiMinImagLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(guiMaxImagLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(guiParametersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(guiMinImagField)
                            .addComponent(guiMaxImagField, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(guiParametersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(guiHeightLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(guiWidthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(guiParametersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(guiHeightField, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(guiWidthField, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        guiParametersPaneLayout.setVerticalGroup(
            guiParametersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guiParametersPaneLayout.createSequentialGroup()
                .addGroup(guiParametersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guiMaxIterField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guiMaxIterLabel)
                    .addComponent(guiNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guiNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(guiParametersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(guiParametersPaneLayout.createSequentialGroup()
                        .addGroup(guiParametersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(guiMinRealLabel)
                            .addComponent(guiMinRealField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(guiParametersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(guiMaxRealLabel)
                            .addComponent(guiMaxRealField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(guiParametersPaneLayout.createSequentialGroup()
                        .addGroup(guiParametersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(guiWidthLabel)
                            .addComponent(guiWidthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(guiParametersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(guiHeightLabel)
                            .addComponent(guiHeightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(guiParametersPaneLayout.createSequentialGroup()
                        .addGroup(guiParametersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(guiMinImagLabel)
                            .addComponent(guiMinImagField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(guiParametersPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(guiMaxImagLabel)
                            .addComponent(guiMaxImagField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        guiRenderButton.setText("Render Selected");
        guiRenderButton.setEnabled(false);
        guiRenderButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                guiRenderButtonActionPerformed(evt);
            }
        });

        guiComputeModeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "a single Java Thread", "multiple Java Threads" }));
        guiComputeModeCombo.setEnabled(false);
        guiComputeModeCombo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                guiComputeModeComboActionPerformed(evt);
            }
        });

        guiRenderWithLabel.setText("with");

        guiTimeElapsedField.setEditable(false);
        guiTimeElapsedField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("h:mm:ss:SS"))));

        guiTimeElapsedLabel.setText("Elapsed time: ");

        guiTimeFormatLabel.setText("hh:mm:ss:SS");

        javax.swing.GroupLayout guiRenderPanelLayout = new javax.swing.GroupLayout(guiRenderPanel);
        guiRenderPanel.setLayout(guiRenderPanelLayout);
        guiRenderPanelLayout.setHorizontalGroup(
            guiRenderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guiRenderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(guiRenderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guiComputeModeCombo, 0, 165, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, guiRenderPanelLayout.createSequentialGroup()
                        .addComponent(guiRenderButton, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guiRenderWithLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, guiRenderPanelLayout.createSequentialGroup()
                        .addComponent(guiTimeElapsedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(guiRenderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(guiRenderPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(guiTimeFormatLabel))
                            .addComponent(guiTimeElapsedField, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        guiRenderPanelLayout.setVerticalGroup(
            guiRenderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guiRenderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(guiRenderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(guiRenderWithLabel)
                    .addComponent(guiRenderButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(guiComputeModeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(guiRenderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guiTimeElapsedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guiTimeElapsedLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(guiTimeFormatLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        guiNewSettingButton.setText("New");
        guiNewSettingButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                guiNewSettingButtonActionPerformed(evt);
            }
        });

        guiSettingList.setModel(mandelParameterList);
        guiSettingList.setCellRenderer(new MandelSetting.SettingListCellRenderer());
        guiSettingList.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                guiSettingListValueChanged(evt);
            }
        });
        guiSettingScrollPane.setViewportView(guiSettingList);

        guiSaveAllButton.setText("Save Selected to Folder...");
        guiSaveAllButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                guiSaveAllButtonActionPerformed(evt);
            }
        });

        guiRemoveSettingButton.setText("Remove");
        guiRemoveSettingButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                guiRemoveSettingButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout guiSettingListPanelLayout = new javax.swing.GroupLayout(guiSettingListPanel);
        guiSettingListPanel.setLayout(guiSettingListPanelLayout);
        guiSettingListPanelLayout.setHorizontalGroup(
            guiSettingListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guiSettingListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(guiSettingListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guiSettingScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, guiSettingListPanelLayout.createSequentialGroup()
                        .addComponent(guiNewSettingButton, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guiRemoveSettingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(guiSaveAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))
                .addContainerGap())
        );
        guiSettingListPanelLayout.setVerticalGroup(
            guiSettingListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, guiSettingListPanelLayout.createSequentialGroup()
                .addGroup(guiSettingListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guiNewSettingButton)
                    .addComponent(guiRemoveSettingButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(guiSettingScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(guiSaveAllButton)
                .addContainerGap())
        );

        guiImageDisplayPanel.setBackground(javax.swing.UIManager.getDefaults().getColor("PropSheet.setBackground"));
        guiImageDisplayPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        guiImageDisplayPanel.setFocusable(false);

	

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
		.addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(guiSettingListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guiImageDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(guiParametersPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guiRenderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
		.addContainerGap()
		.addComponent(guiProcessBarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guiSettingListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(guiImageDisplayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guiParametersPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(guiRenderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap()
		.addComponent(guiProcessBarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void guiNewSettingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guiNewSettingButtonActionPerformed
	mandelParameterList.createSetting();
	guiSettingList.setSelectedIndex(mandelParameterList.getCurrentIndex());
	guiRenderButton.setEnabled(true);
	guiComputeModeCombo.setEnabled(true);
    }//GEN-LAST:event_guiNewSettingButtonActionPerformed
    
    private void guiRenderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guiRenderButtonActionPerformed
	long startTime = System.currentTimeMillis();
	for (MandelSetting o : guiSettingList.getSelectedValuesList()) {
	    mandelProcessor.compute(o, computeMode);
	    o.setImage(mandelProcessor.getLastImage());
	    long betweenTime = System.currentTimeMillis();
	    guiTimeElapsedField.setText(getElapsedTimeString(betweenTime-startTime));
	}
	long endTime = System.currentTimeMillis();
	guiTimeElapsedField.setText(getElapsedTimeString(endTime-startTime));
	refreshImage();
    }//GEN-LAST:event_guiRenderButtonActionPerformed
    
    private void guiRemoveSettingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guiRemoveSettingButtonActionPerformed
	int removed = 0;
	for (int i : guiSettingList.getSelectedIndices()) {
	    mandelParameterList.selectSetting(i-removed++);
	    mandelParameterList.removeCurrentSetting();
	}
	guiSettingList.setSelectedIndex(mandelParameterList.getCurrentIndex());
	if (mandelParameterList.getSize() == 0) {
	    guiRenderButton.setEnabled(false);
	    guiComputeModeCombo.setEnabled(false);
	}
    }//GEN-LAST:event_guiRemoveSettingButtonActionPerformed
    
    private void guiSettingListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_guiSettingListValueChanged
	MandelSetting setting = mandelParameterList.getCurrentSetting();
	if (setting != null) {
	    setting.setName(guiNameField.getText());
	    setting.setMaxIterations(Integer.parseInt(guiMaxIterField.getText()));
	    setting.setMinReal(Double.parseDouble(guiMinRealField.getText()));
	    setting.setMaxReal(Double.parseDouble(guiMaxRealField.getText()));
	    setting.setMinImaginary(Double.parseDouble(guiMinImagField.getText()));
	    setting.setMaxImaginary(Double.parseDouble(guiMaxImagField.getText()));
	    setting.setWidth(Integer.parseInt(guiWidthField.getText()));
	    setting.setHeight(Integer.parseInt(guiHeightField.getText()));
	    mandelParameterList.notifyContentChanged();
	}
	
	if (!evt.getValueIsAdjusting() && !guiSettingList.isSelectionEmpty()) {
	    if (guiSettingList.isSelectedIndex(evt.getFirstIndex())) {
		if (evt.getFirstIndex() == mandelParameterList.getCurrentIndex()) {
		    if (guiSettingList.isSelectedIndex(evt.getLastIndex())) {
			mandelParameterList.selectSetting(evt.getLastIndex());
		    }
		} else {
		    mandelParameterList.selectSetting(evt.getFirstIndex());
		}
	    } else if (guiSettingList.isSelectedIndex(evt.getLastIndex())) {
		mandelParameterList.selectSetting(evt.getLastIndex());
	    } else {
		mandelParameterList.selectSetting(guiSettingList.getMinSelectionIndex());
	    } 
	}
	
    }//GEN-LAST:event_guiSettingListValueChanged
    
    private void guiNameFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_guiNameFieldFocusLost
	mandelParameterList.getCurrentSetting().setName(guiNameField.getText());
	mandelParameterList.notifyContentChanged();
    }//GEN-LAST:event_guiNameFieldFocusLost
    
    private void guiMaxIterFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_guiMaxIterFieldFocusLost
	mandelParameterList.getCurrentSetting().setMaxIterations(Integer.parseInt(guiMaxIterField.getText()));
	mandelParameterList.notifyContentChanged();
    }//GEN-LAST:event_guiMaxIterFieldFocusLost
    
    private void guiMinRealFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_guiMinRealFieldFocusLost
	mandelParameterList.getCurrentSetting().setMinReal(Double.parseDouble(guiMinRealField.getText()));
	mandelParameterList.notifyContentChanged();
    }//GEN-LAST:event_guiMinRealFieldFocusLost
    
    private void guiMaxRealFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_guiMaxRealFieldFocusLost
	mandelParameterList.getCurrentSetting().setMaxReal(Double.parseDouble(guiMaxRealField.getText()));
	mandelParameterList.notifyContentChanged();
    }//GEN-LAST:event_guiMaxRealFieldFocusLost
    
    private void guiMinImagFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_guiMinImagFieldFocusLost
	mandelParameterList.getCurrentSetting().setMinImaginary(Double.parseDouble(guiMinImagField.getText()));
	mandelParameterList.notifyContentChanged();
    }//GEN-LAST:event_guiMinImagFieldFocusLost
    
    private void guiMaxImagFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_guiMaxImagFieldFocusLost
	mandelParameterList.getCurrentSetting().setMaxImaginary(Double.parseDouble(guiMaxImagField.getText()));
	mandelParameterList.notifyContentChanged();
    }//GEN-LAST:event_guiMaxImagFieldFocusLost
    
    private void guiWidthFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_guiWidthFieldFocusLost
	mandelParameterList.getCurrentSetting().setWidth(Integer.parseInt(guiWidthField.getText()));
	mandelParameterList.notifyContentChanged();
	
    }//GEN-LAST:event_guiWidthFieldFocusLost
    
    private void guiHeightFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_guiHeightFieldFocusLost
	mandelParameterList.getCurrentSetting().setHeight(Integer.parseInt(guiHeightField.getText()));
	mandelParameterList.notifyContentChanged();
    }//GEN-LAST:event_guiHeightFieldFocusLost
    
    private void guiSaveAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guiSaveAllButtonActionPerformed
	JFileChooser fc = new JFileChooser();
	fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
	int returnVal = fc.showOpenDialog(this);
	if (returnVal == JFileChooser.APPROVE_OPTION) {
	    File dir = fc.getSelectedFile();
	    for (MandelSetting o : guiSettingList.getSelectedValuesList()) {
		BufferedImage img = o.getImage();
		if (img != null) {
		    File file = new File(dir, o.getName() + ".png");
		    for (int i = 1; file.exists(); i++) {
			file = new File(dir, o.getName() + "_" + i + ".png");
		    }
		    try {
			ImageIO.write(img, "jpg", file);
			System.out.println("Saved image to file " + file.getName());
		    } catch (IOException e) {
			JOptionPane.showMessageDialog(this, "Error writing out file: " + file.getName());
			break;
		    }
		}
	    }
	}
    }//GEN-LAST:event_guiSaveAllButtonActionPerformed
    
    private void guiComputeModeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guiComputeModeComboActionPerformed
	computeMode = MandelProcessor.ComputeMode.class.getEnumConstants()[guiComputeModeCombo.getSelectedIndex()];
    }//GEN-LAST:event_guiComputeModeComboActionPerformed
    
    public String getElapsedTimeString(long elapsedTime) {        
	String format = String.format("%%0%dd", 2);    
	String millisecs = String.format(format, elapsedTime % 1000);
	elapsedTime /= 1000;
	String seconds = String.format(format, elapsedTime % 60);  
	String minutes = String.format(format, (elapsedTime % 3600) / 60);  
	String hours = String.format(format, elapsedTime / 3600);  
	String time =  hours + ":" + minutes + ":" + seconds + ":" + millisecs;  
	return time;  
    }  
    
    public void initFromState() {
	if (mandelParameterList.selectSetting(0)) {
	    guiSettingList.setSelectedIndex(0);
	    guiRenderButton.setEnabled(true);
	    guiComputeModeCombo.setEnabled(true);
	}
    }
    
    public void refreshImage() {
	if (mandelParameterList.getCurrentSetting() != null) {
	    guiImageDisplayPanel.setImage(mandelParameterList.getCurrentSetting().getImage());
	} else {
	    guiImageDisplayPanel.setImage(null);
	}
	guiImageDisplayPanel.repaint();
	guiImageDisplayPanel.revalidate();
	guiSettingList.repaint();
    }
    
    public void updateFromSetting(MandelSetting setting) {
	if (setting != null) {
	    guiNameField.setText(setting.getName());
	    guiMinRealField.setText(Double.toString(setting.getMinReal()));
	    guiMaxRealField.setText(Double.toString(setting.getMaxReal()));
	    guiMinImagField.setText(Double.toString(setting.getMinImaginary()));
	    guiMaxImagField.setText(Double.toString(setting.getMaxImaginary()));
	    guiMaxIterField.setText(Integer.toString(setting.getMaxIterations()));
	    guiWidthField.setText(Integer.toString(setting.getWidth()));
	    guiHeightField.setText(Integer.toString(setting.getHeight()));
	} else {
	    guiNameField.setText("");
	    guiMinRealField.setText("");
	    guiMaxRealField.setText("");
	    guiMinImagField.setText("");
	    guiMaxImagField.setText("");
	    guiMaxIterField.setText("");
	    guiWidthField.setText("");
	    guiHeightField.setText("");
	}
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MandelBatchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MandelBatchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MandelBatchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MandelBatchGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                MandelBatchGUI gui = new MandelBatchGUI();
                gui.setVisible(true);
                gui.initFromState();
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox guiComputeModeCombo;
    private javax.swing.JFormattedTextField guiHeightField;
    private javax.swing.JLabel guiHeightLabel;
    private ImagePanel guiImageDisplayPanel;
    private javax.swing.JFormattedTextField guiMaxImagField;
    private javax.swing.JLabel guiMaxImagLabel;
    private javax.swing.JFormattedTextField guiMaxIterField;
    private javax.swing.JLabel guiMaxIterLabel;
    private javax.swing.JFormattedTextField guiMaxRealField;
    private javax.swing.JLabel guiMaxRealLabel;
    private javax.swing.JFormattedTextField guiMinImagField;
    private javax.swing.JLabel guiMinImagLabel;
    private javax.swing.JFormattedTextField guiMinRealField;
    private javax.swing.JLabel guiMinRealLabel;
    private javax.swing.JTextField guiNameField;
    private javax.swing.JLabel guiNameLabel;
    private javax.swing.JButton guiNewSettingButton;
    private javax.swing.JPanel guiParametersPane;
    private javax.swing.JButton guiRemoveSettingButton;
    private javax.swing.JButton guiRenderButton;
    private javax.swing.JPanel guiRenderPanel;
    private javax.swing.JLabel guiRenderWithLabel;
    private javax.swing.JButton guiSaveAllButton;
    private javax.swing.JList<MandelSetting> guiSettingList;
    private javax.swing.JPanel guiSettingListPanel;
    private javax.swing.JScrollPane guiSettingScrollPane;
    private javax.swing.JFormattedTextField guiTimeElapsedField;
    private javax.swing.JLabel guiTimeElapsedLabel;
    private javax.swing.JLabel guiTimeFormatLabel;
    private javax.swing.JFormattedTextField guiWidthField;
    private javax.swing.JLabel guiWidthLabel;
    private javax.swing.JPanel guiProcessBarPanel;
    private javax.swing.JLabel guiProcessBarLabel;
    private javax.swing.JScrollPane guiProcessBarScrollPane;
    private javax.swing.JPanel guiProcessBarScrollArea;
    // End of variables declaration//GEN-END:variables

    // backend variables
    private MandelSettingList mandelParameterList = new MandelSettingList(this, "Assets/config.ser");
    private MandelProcessor mandelProcessor = new MandelProcessor();
    private MandelProcessor.ComputeMode computeMode = MandelProcessor.ComputeMode.JAVA_SINGLE;
    
}
